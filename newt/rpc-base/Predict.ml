(*
 Autogenerated by Thrift Compiler (0.11.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
(* open Newt_types *)

(* HELPER FUNCTIONS AND STRUCTURES *)

class add_args =
object (self)
  val mutable _req : Int32.t option = None
  method get_req = _req
  method grab_req = match _req with None->raise (Field_empty "add_args.req") | Some _x0 -> _x0
  method set_req _x0 = _req <- Some _x0
  method unset_req = _req <- None
  method reset_req = _req <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "add_args";
    (match _req with None -> () | Some _v -> 
      oprot#writeFieldBegin("req",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_add_args (iprot : Protocol.t) =
  let _str3 = new add_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t4,_id5) = iprot#readFieldBegin in
        if _t4 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id5 with 
          | 1 -> (if _t4 = Protocol.T_I32 then
              _str3#set_req iprot#readI32
            else
              iprot#skip _t4)
          | _ -> iprot#skip _t4);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str3

class add_result =
object (self)
  val mutable _success : Int32.t option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "add_result.success") | Some _x6 -> _x6
  method set_success _x6 = _success <- Some _x6
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "add_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_I32,0);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_add_result (iprot : Protocol.t) =
  let _str9 = new add_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t10,_id11) = iprot#readFieldBegin in
        if _t10 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id11 with 
          | 0 -> (if _t10 = Protocol.T_I32 then
              _str9#set_success iprot#readI32
            else
              iprot#skip _t10)
          | _ -> iprot#skip _t10);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str9

class virtual iface =
object (self)
  method virtual add : Int32.t option -> Int32.t
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method add req = 
    self#send_add req;
    self#recv_add
  method private send_add req = 
    oprot#writeMessageBegin ("add", Protocol.CALL, seqid);
    let args = new add_args in
      args#set_req req;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_add  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_add_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "add failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 1
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_add (seqid, iprot, oprot) =
    let args = read_add_args iprot in
      iprot#readMessageEnd;
      let result = new add_result in
        result#set_success (handler#add args#get_req);
        oprot#writeMessageBegin ("add", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "add" self#process_add;
end

